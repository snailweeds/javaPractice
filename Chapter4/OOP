추상 클래스(abstract class): 구현 코드 없이 메서드의 선언만 있는 추상 메서드(abstract method)를 포함한 클래스, abstract 예약어를 사용, 추상 클래스는 new 할 수 없음 (인스턴스화 할 수 없음)
추상 클래스의 메서드 선언(declaration) : 반환타입, 메서드 이름, 매개변수로 구성
추상 클래스의 메서드 정의(definition) : 메서드 구현(implementation)과 동일한 의미 구현부(body) 를 가짐 ({ })
메서드에 구현 코드가 없으면 abstract 로 선언
abstract로 선언된 메서드를 가진 클래스는 abstract로 선언
모든 메서드가 구현 된 클래스라도 abstract로 선언되면 추상 클래스로 인스턴스화 할 수 없음
추상 클래스의 추상 메서드는 하위 클래스가 상속 하여 구현
추상 클래스 내의 추상 메서드 : 하위 클래스가 구현해야 하는 메서드
추상 클래스 내의 구현 된 메서드 : 하위 클래스가 공통으로 사용하는 메서드 (필요에 따라 하위 클래스에서 재정의 함)

템플릿 메서드: 추상 메서드나 구현 된 메서드를 활용하여 코드의 흐름(시나리오)를 정의하는 메서드, final로 선언하여 하위 클래스에서 재정의 할 수 없게 함, 프레임워크에서 많이 사용되는 설계 패턴, 추상 클래스로 선언된 상위 클래스에서 템플릿 메서드를 활용하여 전체적인 흐름을 정의 하고 하위 클래스에서 다르게 구현되어야 하는 부분은 추상 메서드로 선언하여 하위 클래스에서 구현 하도록 함
final 변수: 값이 변경될 수 없는 상수
final 메서드: 하위 클래스에서 재정의 할 수 없는 메서드
final 클래스: 상속할 수 없는 클래스

Object 클래스: 모든 클래스의 최상위 클래스
java.lang 패키지: 많이 사용하는 기본 클래스들이 속한 패키지, 프로그래밍시 import 하지 않아도 자동으로 import, import.java.lang.*;
모든 클래스는 Object 클래스를 상속 받음
toString() 메서드: 객체의 정보를 String으로 바꾸어서 사용할 때 사용, String이나 Integer 클래스는 이미 재정의 되어 있음
equals() 메서드: 두 인스턴스의 주소 값을 비교하여 true/false를 반환, 재정의하여 두 인스턴스가 논리적으로 동일함의 여부 구현, 인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록 재정의 가능
hashCode() 메서드: 인스턴스의 저장 주소를 반환, 힙메모리에 인스턴스가 저장되는 방식이 hash 방식, 자료의 특정 값(키 값)에 대한 저장 위치를 반환해주는 해시 함수를 사용, 두 인스턴스에 대한 equals()의 반환 값이 true이면 동일한 hashCode() 값을 반환, 논리적으로 동일함을 위해 equals() 메서드를 재정의하였다면 hashCode() 메서드도 재정의하여 동일한 hashCode 값이 반환되도록 하기
(hash: 정보를 저장, 검색하는 자료구조)
clone() 메서드: 객체의 원본을 복제, 생성과정의 복잡한 과정을 반복하지 않고 복제, 객체의 정보(멤버 변수 값등...)가 동일한 또 다른 인스턴스가 생성되는 것이므로, 객체 지향 프로그램에서의 정보 은닉, 객체 보호의 관점에서 위배될 수 있음, 해당 클래스의 clone() 메서드의 사용을 허용한다는 의미로 cloneable 인터페이스를 명시해야 함

String 클래스: String 선언(String str1 = new String("abc"); String str2 = "abc";), 힙 메모리에 인스턴스로 생성되는 경우와 상수 풀(constant pool)에 있는 주소를 참조하는 두 가지 방법, 힙 메모리는 생성될때마다 다른 주소 값을 가지지만, 상수 풀의 문자열은 모두 같은 주소 값을 가짐, 한번 생성된 String은 불변(immutable), String을 연결하면 기존의 String에 연결되는 것이 아닌 새로운 문자열 생성->메모리 낭비 발생 가능
StringBuilder, StringBuffer: 내부적으로 가변적인 char[]를 멤버 변수로 가짐, 문자열을 여러번 연결하거나 변경할 때 사용하면 유용, 새로운 인스턴스를 생성하지 않고 char[]를 변경, StringBuffer는 멀티 쓰레드 프로그래밍에서 동기화(synchronization)을 보장, 단인 쓰레드 프로그램에서는 StringBuilder 사용을 권장, toString() 메서드로 String 반환
text block: 문자열을 """ """ 사이에 이어서 만들 수 있음, html, json 문자열을 만드는데 유용하게 사용

Class 클래스: 자바의 모든 클래스와 인터페이스는 컴파일 후 class 파일 생성, 컴파일 된 class 파일을 로드하여 객체를 동적 로드하고 정보를 가져오는 메서드 제공
Class.forName("클래스 이름") 메서드: 클래스 동적으로 로드
String.class 메서드: 클래스 이름으로 직접 Class 클래스 가져오기
s.getClass(): 생성된 인스턴스에서 Class 클래스 가져오기
동적로딩: 컴파일 시에 데이터 타입이 binding 되는 것이 아닌, 실행(runtime) 중에 데이터 타입을 binding 하는 방법, 문자열 변수로 처리했다가 런타임시에 원하는 클래스를 로딩하여 binding 할 수 있다는 장점, 컴파일 시에 타입이 정해지지 않으므로 동적 로딩시 오류가 발생하면 프로그램의 심각한 장애가 발생가능
newInstance() 메서드: new 키워드를 사용하지 않고 클래스 정보를 활용하여 인스턴스 생성
reflection 프로그래밍: Class 클래스를 사용하여 클래스의 정보(생성자, 변수, 메서드)등을 알 수 있고 인스턴스를 생성하고 메서드를 호출하는 방식의 프로그래밍, 로컬 메모리에 객체 없는 경우, 원격 프로그래밍, 객체의 타입을 알 수 없는 경우에 사용, java.lang.reflect 패키지에 있는 클래스를 활용하여 프로그래밍, 일반적으로 자료형을 알고 있는 경우엔 사용 X